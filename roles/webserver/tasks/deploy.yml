---
# Node.js from source
- name: Upgrade
  action: apt update_cache=yes upgrade=yes

- name: Install build dependencies
  action: apt pkg={{item}} state=installed
  with_items:
    - build-essential
    - automake
    - bison
    - autoconf
    - pkg-config
    - openssl
    - libssl-dev
    - curl
    - git-core
    
# Node from source
- name: Node.js from Source | Checking installed version of node.js
  shell: /usr/bin/test "$(node -v 2> /dev/null)" = v${node_version}
  register: wanted_version_installed
  ignore_errors: True

- name: Node.js from Source | Fetching node.js source
  action: get_url url=http://nodejs.org/dist/v${node_version}/${node_tarball} dest=/tmp/
  when: wanted_version_installed.rc == 1

- name: Node.js from Source | Unpack node.js tarball
  command: tar zxf ${node_tarball} chdir=/tmp
  when: wanted_version_installed.rc == 1

- name: Node.js from Source | Configure
  shell: /usr/bin/python ./configure --prefix=${node_path} chdir=/tmp/${node_prefix}
  when: wanted_version_installed.rc == 1

- name: Node.js from Source | Make
  shell: /usr/bin/make chdir=/tmp/${node_prefix}/
  when: wanted_version_installed.rc == 1

- name: Node.js from Source | Make install
  shell: /usr/bin/make install chdir=/tmp/${node_prefix}/
  when: wanted_version_installed.rc == 1
- name: Create deployment user
  user: name=deploy comment="Application deployment user"

- authorized_key: user=deploy key='$FILE(~/.ssh/id_rsa.pub)'

- name: Create deployment directory
  file: path={{deploy_directory}} owner=deploy group=deploy state=directory

- name: Make shared directories
  file: path={{deploy_directory}}/shared/{{item}} group=deploy owner=deploy state=directory
  with_items:
    - tmp
    - log
    - config
  tags: shared
